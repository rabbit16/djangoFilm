# Generated by Django 2.2.5 on 2022-05-19 17:00

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('administer', '0001_initial'),
        ('auth', '0013_auto_20220510_1719'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(error_messages={'message': '名字格式出错'}, help_text='用户真实姓名', max_length=20, verbose_name='用户真实姓名')),
                ('ticketManager', models.BooleanField(default=False, help_text='票务管理员', verbose_name='票务管理员')),
                ('buyManager', models.BooleanField(default=False, help_text='售票员', verbose_name='售票员')),
                ('mobile', models.CharField(error_messages={'unique': '该手机号已注册'}, help_text='手机号', max_length=11, unique=True, verbose_name='手机号')),
                ('email_ac', models.BooleanField(default=False, verbose_name='邮箱状态')),
                ('registration_data', models.DateTimeField(default=django.utils.timezone.now, help_text='注册时间', verbose_name='注册时间')),
                ('sex', models.BooleanField(default=True, help_text='性别', verbose_name='性别')),
                ('birthday', models.DateTimeField(default=django.utils.timezone.now, help_text='生日', verbose_name='生日')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'db_table': 'tb_users',
            },
            managers=[
                ('objects', users.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Movie_id', models.CharField(help_text='电影id', max_length=20, verbose_name='电影id')),
                ('Movie_name', models.CharField(help_text='电影名', max_length=20, verbose_name='电影名')),
                ('Movie_time', models.CharField(help_text='电影上映时间', max_length=20, verbose_name='电影上映时间')),
                ('m_movietype', models.ManyToManyField(to='administer.Movie_type')),
            ],
            options={
                'verbose_name': '电影',
                'db_table': 'tb_Movie',
            },
        ),
        migrations.CreateModel(
            name='Times',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session', models.IntegerField(help_text='场次', verbose_name='场次')),
                ('S_movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.Movie')),
                ('S_seat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administer.Seat')),
                ('S_studio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administer.Studio')),
                ('S_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '电影场次',
                'db_table': 'tb_session',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Ticket_id', models.IntegerField(help_text='电影票id', max_length=20, verbose_name='电影票id')),
                ('Seat_id', models.IntegerField(help_text='座位id', max_length=20, verbose_name='座位id')),
                ('Seat_name', models.IntegerField(help_text='座位名称', max_length=20, verbose_name='座位名称')),
                ('Studio_id', models.IntegerField(help_text='演播厅id', max_length=20, verbose_name='演播厅id')),
                ('Studio_name', models.IntegerField(help_text='演播厅名称', max_length=20, verbose_name='演播厅名称')),
                ('Movie_name', models.CharField(help_text='电影名', max_length=20, verbose_name='电影名')),
                ('Movie_time', models.DateTimeField(help_text='电影时间', verbose_name='电影时间')),
                ('price', models.FloatField(help_text='电影票的价格', verbose_name='电影票的价格')),
                ('s_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '电影票',
                'db_table': 'tb_Ticket',
            },
        ),
    ]
